exit
user
logged_in?
exit
current_user.nil?
current_user.nil
current_user
exit
answer.answervotes
answer
exit
answer.answervotes
answer
exit
Answervote.first
answer.vote
answer.votes
answer
exit
question.questionvotes
answer.answervotes
answer
exit
answer.answervotes
answer
exit
answer
exit
answer
answer.answervotes.where(pattern:true)
exit
answer.question
Answer.find(8).question_id = 1
answer.question
answer
exit
@user.answers.any?
@user.answers.any
@user.answers
@user.answer.any?
@user.answer.any
@user.answer
exit
Answer.create(content: params[:content], user_id: session[:user_id],question_id: params[:question_id])
params
exit
params
exit
params
exit
params[:content]
exit
params
params[:content]
params[:content_1]
exit
params[:content]
exit
c
n
c
params[:content]
params[:content
exit
params[:question_id]
params[:content]
c
n
content
@question.id
exit
params[:question_id]
session[:user_id]
params[:content]
exit
@answer
params[:content]
@content
exit
question.answers
question.answers.limit(1).each { |content| puts content }
question.answers.limit(1).each do |content| content
question.answers.limit(1).content
question.answers.limit(1)
exit
@user.questions
@user.questions.any?
exit
question.answers.count
question.answers == nil
question.answers.each { |answer| answer.content}
question.answers
exit
@answer
exit
@answer
exit
@answer
exit
@answer
exit
@answer
exit
@answer
exit
@answer
n
@answer
n
params[:content]
exit
params[:question_id]
params[:content]
exit
params[:content]
@answer
@answer.content
exit
answer.user.name
answer
answer.user
answer.user_id
answer.users
answer
answer.user
exit
questionvote[:pattern]
exit
questionvote
c
n
exit
questionvote.nil?
exit
questionvote.nil?
exit
questionvote
d
exit
questionvote
exit
@questionvotes_count
exit
@questionvotes_count
exit
@questionvotes_count
exit
@questionvotes_count 
exit
@questionvotes_count
exit
question.questionvotes.find_by(user_id: current_user.id)
question.questionvotes.find_by(user_id: current_user.id).update(pattern: nil)
questionvote[:pattern] == true
n
!questionvote.save
exit
@questionvotes_count =  Questionvote.where(question_id: @question_id).where(pattern: true).count
question.questionvotes.find_by(user_id: current_user.id)
question.questionvotes.find_by(user_id: current_user.id).update(pattern: nil)
questionvote[:pattern] == true
exit
Questionvote.where(question_id: @question_id).where(pattern: true).count
@questionvotes_count =  Questionvote.where(question_id: @question_id).count
question.questionvotes.find_by(user_id: current_user.id)
question.questionvotes.find_by(user_id: current_user.id).update(pattern: nil)
!questionvote.save
questionvote.save
questionvote
exit
n
Question.find(@question_id)
Question.find_by(question_id: @question_id)
@question_id
question = Question.find_by(question_id: @question_id)
@question_id = params[:question_id]
exit
question = Question.find(question_id: @question_id)
@question_id = params[:question_id]
exit
questionvote.save
questionvote.save?
questionvote
questionvotes
n
question
n
Question.find(params[:question_id])
Question.find(params[:question_id]
Question.find(2)
Question.all
params[:question_id]
Question.find(params[:question_id]
question
question.questionvotes.new(user_id: current_user.id, pattern: true)
question.questionvotes
questionvote
Questionvote.all
Questionvate.all
questionvote.save?
exit
@current_user.nil?
current_user
!current_user.nil?
if current_user?
if logged_in?
logged_in?
exit
question.questionvotes.find_by(user_id: current_user.id).nil?
question.questionvotes.find_by(user_id: current_user.id)
question.questionvotes
question.questionvotes.nil?
question.questionvotes.exist?
question.questionvotes.save?
question.questionvotes.save
question.questionvotes.new
questionvote.save?
exit
question.questionvotes.find_by(user_id: current_user.id).save?
question.questionvotes.find_by(user_id: current_user.id)
questionvote.save?
question.questionvotes.save?
exit
c
params
exit
p params[:questionvotes_id]
exit
params[questionvotes_id]
exit
questionvotes.all
Questionvotes.all
exit
<%=@question.id%>
@question.id
exit
@question.id
params[question_id]
Questionvote.create(user_id: current_user.id, question_id: params[:question_id], pattern: true)
exit
params:question_id
 Questionvote.create(user_id: current_user.id, question_id: params[:question_id], pattern: true)
exit
@user.questionvotes.find_by(question_id: @question.id).nil?
exit
@user.questionvotes.find_by(question_id: @question.id).exists?
@user.questionvotes.find_by(question_id: @question.id).exist?
@user.questionvotes.find_by(question_id: @question.id).nil?
@user.questionvotes.find_by(question_id: @question.id).empty
@user.questionvotes.find_by(question_id: @question.id).any
@user.questionvotes.find_by(question_id: @question.id).any?
@user.questionvotes.find_by(question_id: @question.id)
@user.questionvotes
exit
@user.questionvotes.find_by(question_id: @question.id).id
@user.questionvotes.find_by(question_id: @question.id)
