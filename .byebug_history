exit
questionvote[:pattern]
exit
questionvote
c
n
exit
questionvote.nil?
exit
questionvote.nil?
exit
questionvote
d
exit
questionvote
exit
@questionvotes_count
exit
@questionvotes_count
exit
@questionvotes_count
exit
@questionvotes_count 
exit
@questionvotes_count
exit
question.questionvotes.find_by(user_id: current_user.id)
question.questionvotes.find_by(user_id: current_user.id).update(pattern: nil)
questionvote[:pattern] == true
n
!questionvote.save
exit
@questionvotes_count =  Questionvote.where(question_id: @question_id).where(pattern: true).count
question.questionvotes.find_by(user_id: current_user.id)
question.questionvotes.find_by(user_id: current_user.id).update(pattern: nil)
questionvote[:pattern] == true
exit
Questionvote.where(question_id: @question_id).where(pattern: true).count
@questionvotes_count =  Questionvote.where(question_id: @question_id).count
question.questionvotes.find_by(user_id: current_user.id)
question.questionvotes.find_by(user_id: current_user.id).update(pattern: nil)
!questionvote.save
questionvote.save
questionvote
exit
n
Question.find(@question_id)
Question.find_by(question_id: @question_id)
@question_id
question = Question.find_by(question_id: @question_id)
@question_id = params[:question_id]
exit
question = Question.find(question_id: @question_id)
@question_id = params[:question_id]
exit
questionvote.save
questionvote.save?
questionvote
questionvotes
n
question
n
Question.find(params[:question_id])
Question.find(params[:question_id]
Question.find(2)
Question.all
params[:question_id]
Question.find(params[:question_id]
question
question.questionvotes.new(user_id: current_user.id, pattern: true)
question.questionvotes
questionvote
Questionvote.all
Questionvate.all
questionvote.save?
exit
@current_user.nil?
current_user
!current_user.nil?
if current_user?
if logged_in?
logged_in?
exit
question.questionvotes.find_by(user_id: current_user.id).nil?
question.questionvotes.find_by(user_id: current_user.id)
question.questionvotes
question.questionvotes.nil?
question.questionvotes.exist?
question.questionvotes.save?
question.questionvotes.save
question.questionvotes.new
questionvote.save?
exit
question.questionvotes.find_by(user_id: current_user.id).save?
question.questionvotes.find_by(user_id: current_user.id)
questionvote.save?
question.questionvotes.save?
exit
c
params
exit
p params[:questionvotes_id]
exit
params[questionvotes_id]
exit
questionvotes.all
Questionvotes.all
exit
<%=@question.id%>
@question.id
exit
@question.id
params[question_id]
Questionvote.create(user_id: current_user.id, question_id: params[:question_id], pattern: true)
exit
params:question_id
 Questionvote.create(user_id: current_user.id, question_id: params[:question_id], pattern: true)
exit
@user.questionvotes.find_by(question_id: @question.id).nil?
exit
@user.questionvotes.find_by(question_id: @question.id).exists?
@user.questionvotes.find_by(question_id: @question.id).exist?
@user.questionvotes.find_by(question_id: @question.id).nil?
@user.questionvotes.find_by(question_id: @question.id).empty
@user.questionvotes.find_by(question_id: @question.id).any
@user.questionvotes.find_by(question_id: @question.id).any?
@user.questionvotes.find_by(question_id: @question.id)
@user.questionvotes
exit
@user.questionvotes.find_by(question_id: @question.id).id
@user.questionvotes.find_by(question_id: @question.id)
@user.questionvotes.find(question_id: @question.id)
@user.questionvotes.question_id
@user.questionvotes
exit
questionvote.question_id
questionvote
exit
y = "exi
y = '/questions/#{x}'
y = '/questions/#{x)'
x = params[:question_id]
x = '/questions/#{params[:question_id]}'
x = '/questions/params[:question_id]'
params[:question_id]
exit
Questionvote.all
exit
Questionvote.create(user_id: current_user.id, question_id: params[:question_id])
exit
Questionvote.create(user_id: current_user.id, question_id: params[:question_id])
exit
params[:question_id]
Questionvote.create(user_id: current_user.id, question_id: params[:question_id])
exit
@user.authenticate(y)
y = "123456789"
@user.authenticate(x)
x = params[:current_password]
exit
@user.password_digest
@user.password
params[:current_password]
params[:new_password]
params[:password]
@user.errors
exit
@user.update(password: y)
@user.authenticate(x)
y = params[:new_password]
x = params[:current_password]
params[:current_password] = x
exit
@user.update(password: params[:new_password])
params[:new_password]
@user.authenticate(params[:current_password])
params[:current_password]
exit
logged_in?
exit
user.errors.on(:password_digest)
user.errors.on(:password)
user.errors.full_messages
user.errors
exit
current_user.id == answer.user_id.to_i
current_user.id.inspect
answer.user_id.inspect
p answer.user_id
current_user.id == answer.user_id
n
current_user.id
answer.user_id
exit
@answer
exit
current_user.id
@current_user
current_user
exit
@user.answers.any?
@user.answers != nil
@user.answers
exit
@user.answers.each {|answer| answer.question_id
n
answer
n
@user.answers
exit
User.find(4)
User.all
question.user_id
exit
Answer.find_by(question_id: question.id) != nil
Answer.find_by(question_id: question.id) == nil
Answer.find_by(question_id: question.id).length
Answer.find_by(question_id: question.id)
Answer.find_by(question_id: question.id).any?
Answer.find_by(question_id: question.id).any
Answer.find_by(question_id: question.id)
question.id
exit
answer
@question.id
exit
Answer.where(question_id: @question.id)
Answer.all
@question.id
question.id
exit
Question.all
@answer
exit
@answer
exit
session[:user_id]
exit
#{question.id}
question.id
question
exit
session[:user_id]
question.destroy
question
exit
c
p session[:user_id]
exit
params[:email]
User.all
user
exit
encrypted_password.length
encrypted_password
exit
